{"version":3,"file":"index.modern.js","sources":["../src/constants/customEvents.tsx","../src/hooks/useWatcher.tsx","../src/hocs/withLayout.tsx","../src/utils/history.tsx","../src/components/LazyCompoent.tsx","../src/utils/delay.tsx","../src/components/Loading.tsx","../src/utils/Factory.tsx","../src/utils/getRoutes.tsx","../src/routes.tsx","../src/components/Link.tsx","../src/hooks/useHeight.tsx","../src/utils/getLayoutCollections.tsx","../src/components/LayoutComponent.tsx","../src/components/Router.tsx"],"sourcesContent":["const CUSTOM_EVENTS = {\n  'CHANGE_LAYOUTS': 'CHANGE_LAYOUTS',\n}\n\nexport { CUSTOM_EVENTS }\n","import { useEventListener } from 'ahooks'\n\nconst watcher = {\n  useWatcher: <T,>(name: string, listener: (data: T) => void) => {\n    // @ts-expect-error\n    useEventListener(name, ({ detail }: { detail: T }) => {\n      listener(detail)\n    })\n  },\n  emitWatcher: <T,>(name: string, data: T) =>\n    window.dispatchEvent(new CustomEvent(name, { detail: data })),\n}\n\nexport { watcher }\n","import React, { useLayoutEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { CUSTOM_EVENTS } from '../constants/customEvents'\nimport { watcher } from '../hooks/useWatcher'\n\ntype T_LayoutOptions = {\n  header?: string\n  content?: string\n  footer?: string\n}\n\nconst withLayout = (Comment: React.FC<any>, options?: T_LayoutOptions) => () => {\n  const { pathname } = useLocation()\n\n  useLayoutEffect(() => {\n    watcher.emitWatcher(CUSTOM_EVENTS.CHANGE_LAYOUTS, {\n      [pathname]: {\n        header: options?.header || 'index',\n        content: options?.content || 'index',\n        footer: options?.footer || 'index',\n      },\n    })\n  }, [])\n\n  return <Comment />\n}\n\nexport { withLayout }\nexport type { T_LayoutOptions }\n","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\nexport { history }\n","import React, { useEffect } from 'react'\nimport { useUpdate } from 'ahooks'\nimport { delay } from '../utils/delay'\nimport { Factory } from '../utils/Factory'\n\nconst LazyComponent: React.FC<React.PropsWithChildren<{ factory: Factory }>> = React.memo(\n  ({ factory, children }) => {\n    const reRender = useUpdate()\n\n    useEffect(() => {\n      if (factory.isFetched) return\n\n      Promise.all([delay(), factory.fetch()]).then(() => reRender())\n    }, [])\n\n    return <factory.Component>{children}</factory.Component>\n  }\n)\n\nexport { LazyComponent }\n","const delay = (ms?: number) => new Promise((resolve) => setTimeout(resolve, ms || 1000))\n\nexport { delay }\n","import React from 'react'\nimport { Loading as NcLoading } from 'nc-simple-loading'\nimport styled from 'styled-components'\n\nconst Loading = React.memo(() => (\n  <LoadingContainer>\n    <NcLoading />\n  </LoadingContainer>\n))\n\nexport { Loading }\n\nconst LoadingContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 999999999;\n  background: white;\n  display: flex;\n  align-items: center;\n  justify-contents: space-between;\n`\n","import React from 'react'\nimport { Loading } from '../components/Loading'\nimport { T_Factory } from './lazy'\n\nclass Factory {\n  factory: T_Factory\n  isFetched: boolean = false\n  Component: React.FC<any> = Loading\n  path: string\n\n  constructor(factory: T_Factory, path?: string) {\n    this.factory = factory\n    this.path = path || ''\n  }\n\n  fetch = async () => {\n    const maxTryTimes = 3 // cho phép fetch tối đa 3 lần\n\n    for (let index = 0; index < maxTryTimes; index++) {\n      try {\n        const { default: Component } = await this.factory()\n        this.Component = Component\n        this.isFetched = true\n        break // nếu fetch thành công thì done luôn không cần thử lại\n      } catch (e) {\n        if (index === maxTryTimes - 1) {\n          // đây là lần fetch cuối cùng, tức là 3 lần liên tiếp fetch bị lỗi\n          // TODO viết 1 component thông báo lỗi chunk load và không cố gắng fetch lại\n        }\n\n        // nếu chưa phải lần fetch cuối cùng thì không làm gì cả, để vòng for tự tăng và thử load lại lần nữa\n      }\n    }\n  }\n}\n\nexport { Factory }\n","import React from 'react'\nimport _ from 'lodash'\nimport { LazyComponent } from '../components/LazyCompoent'\nimport { Factory } from './Factory'\nimport { T_Factory } from './lazy'\n\n// TODO xử lý trường hợp 2 slug trùng tên\nconst getRoutes = () => {\n  // @ts-expect-error\n  const importedRoutes: Record<string, T_Factory> = import.meta.glob('/src/pages/**/[a-z[]*.tsx')\n  const output = []\n  // const lazyFunc = lazyFunction || lazy\n\n  for (const key in importedRoutes) {\n    const pathWithSlugRegex = /^(\\/[a-z][^\\]/\\s]*|\\/\\[[a-z][^/\\s]*\\])+$|^\\/$/g\n    let path =\n      key\n        .split(/\\/src\\/pages|\\.tsx$|\\/index\\.tsx$/g)\n        .join('')\n        .toLowerCase() || '/'\n\n    if (!pathWithSlugRegex.test(path)) {\n      console.warn('[nc-toolkits]', key, 'is invalid path.')\n      continue\n    } // không tạo route nếu không đúng định dạng\n\n    path = path.split(/\\]/).join('').split(/\\/\\[/).join('/:') // thay thees /[slug] thành /:slug\n    const factory = new Factory(importedRoutes[key])\n\n    output.push({\n      path,\n      factory,\n      element: <LazyComponent factory={factory} />,\n    })\n  }\n\n  return {\n    routes: output.map((o) => _.pick(o, ['path', 'element'])),\n    routePreloads: output.map((o) => _.pick(o, ['path', 'factory'])),\n  }\n}\n\nexport { getRoutes }\n","import { getRoutes } from './utils/getRoutes'\n\nconst { routes, routePreloads } = getRoutes()\n\nexport { routePreloads, routes }\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport { useInViewport } from 'ahooks'\nimport { matchPath, Link as DefaultLink } from 'react-router-dom'\nimport { routePreloads } from '../routes'\n\nconst Link: typeof DefaultLink = React.memo(\n  React.forwardRef((props, forwardedRef) => {\n    // @ts-expect-error\n    const ref = useRef(forwardedRef?.current || forwardedRef || null)\n    const [inViewport] = useInViewport(ref)\n\n    const targetPath: string = useMemo(\n      () => (typeof props.to === 'string' ? props.to : props.to.pathname) as string,\n      [JSON.stringify(props.to)]\n    )\n\n    const currentRoute = useMemo(\n      () => routePreloads.find((r) => matchPath(r.path, targetPath)),\n      [targetPath]\n    )\n\n    useEffect(() => {\n      if (!inViewport) return // không thực hiện nếu link chưa hiển thị trên màn hình\n      if (!currentRoute || !currentRoute.factory) return // không thực hiện nếu không tìm được route\n      if (currentRoute.factory.isFetched) return // không thực hiện gì nếu đã được preload\n\n      currentRoute.factory.fetch()\n    }, [inViewport])\n\n    return <DefaultLink {...props} ref={ref} />\n  })\n)\n\nexport { Link }\n","import { useMemo, useRef } from 'react'\nimport { useSize } from 'ahooks'\n\nconst useHeight = (): [React.MutableRefObject<null>, number] => {\n  const ref = useRef(null)\n  const size = useSize(ref)\n  const height = useMemo(() => size?.height || 0, [size])\n  return [ref, height]\n}\n\nexport { useHeight }\n","import { Factory } from './Factory'\nimport { T_Factory } from './lazy'\n\nconst getCollectionByType = (\n  type: 'headers' | 'footers' | 'contents'\n): Record<string, T_Factory> => {\n  switch (type) {\n    case 'headers':\n      // @ts-expect-error\n      return import.meta.glob('/src/layouts/headers/*.tsx')\n    case 'footers':\n      // @ts-expect-error\n      return import.meta.glob('/src/layouts/footers/*.tsx')\n    case 'contents':\n      // @ts-expect-error\n      return import.meta.glob('/src/layouts/contents/*.tsx')\n    default:\n      return {}\n  }\n}\n\nconst getLayoutCollections = (component: 'headers' | 'footers' | 'contents') => {\n  const output: Record<string, Factory> = {}\n  const importedCompoents = getCollectionByType(component)\n\n  for (const key in importedCompoents) {\n    const parsedKey =\n      key.split(new RegExp(`/src/layouts/${component}/|.tsx$|/index.tsx$`, 'g')).join('') || 'index'\n    output[parsedKey] = new Factory(importedCompoents[key])\n  }\n\n  return output\n}\n\nexport { getLayoutCollections }\n","import React, { PropsWithChildren, useMemo } from 'react'\nimport { Factory } from '../utils/Factory'\nimport { getLayoutCollections } from '../utils/getLayoutCollections'\nimport { LazyComponent } from './LazyCompoent'\n\nconst layouts = {\n  headers: getLayoutCollections('headers'),\n  footers: getLayoutCollections('footers'),\n  contents: getLayoutCollections('contents'),\n}\n\nconst LayoutComponent: React.FC<\n  PropsWithChildren<{ component: 'headers' | 'footers' | 'contents'; name: string }>\n> = React.memo(({ name, children, component }) => {\n  const factory: Factory | null = useMemo(() => {\n    const collections = layouts[component]\n    if (name === 'none' || !collections) return null\n\n    return collections[name] || collections['index'] || null\n  }, [component, name])\n\n  if (!factory) return <React.Fragment>{children}</React.Fragment>\n  return <LazyComponent factory={factory}>{children}</LazyComponent>\n})\n\nexport { LayoutComponent }\n","import React, { Suspense, useMemo, useState } from 'react'\nimport { unstable_HistoryRouter as HistoryRouter, useRoutes } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { CUSTOM_EVENTS } from '../constants/customEvents'\nimport { T_LayoutOptions } from '../hocs/withLayout'\nimport { useHeight } from '../hooks/useHeight'\nimport { watcher } from '../hooks/useWatcher'\nimport { routes } from '../routes'\nimport { history } from '../utils/history'\nimport { LayoutComponent } from './LayoutComponent'\n\ntype T_RouterProvider = React.NamedExoticComponent<{\n  fallback?: React.ReactNode\n}>\n\nconst Router: T_RouterProvider = React.memo(({ fallback }) => {\n  const pathname = history.location.pathname\n  const [layout, setLayout] = useState<Record<string, T_LayoutOptions>>({})\n  const configs = useMemo(() => layout[pathname], [layout, pathname])\n  const [headerRef, headerHeight] = useHeight()\n  const [footerRef, footerHeight] = useHeight()\n\n  watcher.useWatcher<Record<string, T_LayoutOptions>>(CUSTOM_EVENTS.CHANGE_LAYOUTS, (options) => {\n    setLayout((prev) => ({ ...prev, ...options }))\n  })\n\n  return (\n    // @ts-expect-error\n    <HistoryRouter history={history}>\n      <Suspense fallback={fallback}>\n        {configs?.header && (\n          <Header ref={headerRef}>\n            <LayoutComponent component=\"headers\" name={configs.header} />\n          </Header>\n        )}\n\n        {configs?.content && (\n          <Main headerHeight={headerHeight} footerHeight={footerHeight}>\n            <LayoutComponent component=\"contents\" name={configs?.content}>\n              <Routes />\n            </LayoutComponent>\n          </Main>\n        )}\n\n        {Boolean(configs?.content) || (\n          <main>\n            <Routes />\n          </main>\n        )}\n\n        {configs?.footer && (\n          <footer ref={footerRef}>\n            <LayoutComponent component=\"footers\" name={configs?.footer} />\n          </footer>\n        )}\n      </Suspense>\n    </HistoryRouter>\n  )\n})\n\nexport { Router }\n\nconst Main = styled.main`\n  min-height: ${({\n    headerHeight = 0,\n    footerHeight = 0,\n  }: {\n    headerHeight?: number\n    footerHeight?: number\n  }) => `calc(100vh - ${headerHeight + footerHeight}px)`};\n`\n\nconst Header = styled.header`\n  position: sticky;\n  top: 0;\n  left: 0;\n  background: white;\n  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n`\n\nconst Routes = React.memo(() => useRoutes(routes))\n"],"names":["useWatcher","name","listener","useEventListener","detail","emitWatcher","data","window","dispatchEvent","Comment","options","pathname","useLocation","useLayoutEffect","watcher","[object Object]","header","content","footer","createBrowserHistory","React","memo","factory","children","useUpdate","useEffect","isFetched","Promise","all","resolve","setTimeout","fetch","then","reRender","Component","LoadingContainer","NcLoading","styled","div","constructor","path","this","Loading","async","index","default","_this","e","routes","routePreloads","import","meta","glob","key","split","join","toLowerCase","pathWithSlugRegex","test","console","warn","importedRoutes","output","push","element","LazyComponent","map","o","_","pick","getRoutes","forwardRef","props","forwardedRef","useRef","current","inViewport","useInViewport","ref","useMemo","to","JSON","stringify","find","r","matchPath","targetPath","currentRoute","DefaultLink","useSize","size","height","component","type","getCollectionByType","importedCompoents","headers","getLayoutCollections","footers","contents","layouts","collections","Fragment","fallback","history","location","layout","setLayout","useState","headerRef","headerHeight","useHeight","footerRef","footerHeight","prev","HistoryRouter","Suspense","configs","Header","LayoutComponent","Main","Routes","Boolean","main","useRoutes"],"mappings":"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"}